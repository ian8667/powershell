#-------------------------------------------------
Collection of scriptblocks.

This text file is a collection of useful ScriptBlocks
(System.Management.Automation.ScriptBlock) which can be
used with PowerShell background jobs and the Start-Job
or Start-ThreadJob cmdlet.

See also the Start-Job/Start-ThreadJob cmdlet parameter
'ScriptBlock'.

o Composite formatting
A composite format string consists of fixed text intermixed
with indexed placeholders, called format items, that
correspond to the objects in the list.
https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting?redirectedfrom=MSDN

o about_Script_Blocks
In the PowerShell programming language, a script block is
a collection of statements or expressions that can be used
as a single unit. Syntactically, a script block is a
statement list in curly braces. A script block can accept
arguments and return values.
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_script_blocks?view=powershell-7.1

; -----

Allow HashTable to reference itself (works!).
Ways to implement this idea.
$ConfigData = @{
  input = ($input = 'c:/test/inputfile.txt')
  output = $input + '-pdf'
}
or
$ConfigData = @{
  input = 'c:/test/inputfile.txt'
}
$ConfigData.output = $ConfigData.input + '-pdf';

; -----

Last updated: 21 March 2023

#-------------------------------------------------
Index of script blocks

sb001 - Find the oldest and newest file in a particular directory.
        No recursion is carried out.
sb002 - Text file with line numbers.
sb003 - List files older (or newer) than N days. No recursion
        is carried out.
sb004 - Finds a file(s) when we don't know where it is located.
        Recursion is carried out from the initial start directory
        given.
sb005 - Calculate the hash of a file.
sb006 - Count the number of lines in a text file.
#-------------------------------------------------

##===========================================
## New item
## Find the oldest and newest file in a directory. No
## recursion is carried out.
## 22 February 2023
##===========================================

$sb001 = {
<#
Find oldest and newest LastWriteTime of files.

Oldest and newest file.

Scriptblock to find the oldest and newest file in a directory.
No recursion is carried out so only the start (initial) directory
is looked at. The System.IO.FileSystemInfo.LastWriteTime property
is used to determine whether a file is the oldest and newest.
#>

Begin {

Set-StrictMode -Version Latest;
$ErrorActionPreference = "Stop";

    Write-Output ("`nScriptblock started on {0}" -f (Get-Date -Format 's'));

    $path = 'C:\gash'; # <-- Change accordingly.
    Set-Variable -Name 'path' -Description "Search directory for the scriptblock" -Option ReadOnly;

    $oldDate = [System.DateTime]::MaxValue;
    $newDate = [System.DateTime]::MinValue;
    $oldFilename = '';
    $newFilename = '';
    [UInt32]$fileCounter = 0;
    #Set-Variable -Name 'oldDate', 'newDate' -Option ReadOnly;

    Write-Output "`nLooking for the oldest and newest LastWriteTime of files";
    Write-Output ("Directory looked at (with no recursion): {0}" -f $path);

}

Process {

    Get-ChildItem -Path $path -File | ForEach-Object {
        $data = $_;
        $fileCounter++;

        if ($data.LastWriteTime -lt $oldDate) {
            $oldFilename = $data.Name;
            $oldDate = $data.LastWriteTime;
        }

        if ($data.LastWriteTime -gt $newDate) {
            $newFilename = $data.Name;
            $newDate = $data.LastWriteTime;
        }
    } #end ForEach-Object block

}

End {

    if ($fileCounter -eq 0) {
       Write-Warning -Message 'No files found in directory';
    } else {
      Write-Output "`n`nOldest file:";
      Write-Output ("FileName: {0},     LastWriteTime: {1}" -f $oldFilename, $oldDate.ToString('F'));
      Write-Output "Newest file:";
      Write-Output ("FileName: {0},     LastWriteTime: {1}" -f $newFilename, $newDate.ToString('F'));
      Write-Output ("`n{0:N0} files looked at in total" -f $fileCounter);

      Write-Output "`nTime difference between oldest and newest LastWriteTime of the files:";
      $tspan = New-TimeSpan -Start $oldDate -End $newDate;
      Write-Output $tspan | Format-Table Days, Hours, Minutes;
    }

    Write-Output ("`nAll done now at {0}" -f (Get-Date -Format 's'));
    Write-Output "";

}

} #end of ScriptBlock sb001

##===========================================
## New item
## Text file with line numbers.
## 23 February 2023
##===========================================

$sb002 = {
<#
Text file line numbers.

Concatenates a text file to a new text file prefixing a line
number to each line in the new file. The line number has a data
structure of UInt16, so line numbers will potentially be in the
range 1 to 65535.

There are comments on the Internet regarding performance
implications of using cmdlets 'Get-Content' and 'Add-Content'.
Given the ad-hoc nature of this little script, I'm prepared to
take any performance implications. If the worst comes to the
worst, I'll wrap this code in a script block and submit it as
PowerShell background job using the Start-Job cmdlet.
#>

Begin {
Set-StrictMode -Version Latest;
$ErrorActionPreference = "Stop";

  Write-Output ("`nScriptblock started on {0}" -f (Get-Date -Format 's'));

  $BasePath = 'C:\gash';  # <-- Change accordingly.
  Set-Variable -Name 'BasePath' -Option ReadOnly;
  Set-Location -Path $BasePath;
  $myfile = @{
      'InputFile' = Join-Path -Path $BasePath -ChildPath 'gashfile.txt';   # <-- Change accordingly.
      'OutputFile' = Join-Path -Path $BasePath -ChildPath 'gashfile.txt.lines';  # <-- Change accordingly.
  }
  Set-Variable -Name 'myfile' -Option ReadOnly;

  [UInt16]$lineCounter = 0;

  if ((Get-Item $myfile.InputFile).Length -eq 0) {
      throw "Input file $($myfile.InputFile) cannot be zero bytes length)";
  }

  if ($myfile.InputFile -eq $myfile.OutputFile) {
      throw "Input file $($myfile.InputFile) cannot be the same as output file $($myfile.OutputFile)";
  }

  if (Test-Path -Path $myfile.OutputFile) {
      Clear-Content -Path $myfile.OutputFile;
  }

} #end Begin block

Process {

  foreach ($oldLine in (Get-Content -Path $myfile.InputFile)) {
      $lineCounter++;
      $newLine = [System.String]::Format(("{0} | {1}"), $lineCounter.ToString('00000'), $oldLine);
      #Add the newly constructed line to the output file
      Add-Content -Path $myfile.OutputFile -Value $newLine;
  }

}

End {

  Write-Output "Files used:"
  Write-Output $myfile;

  Get-ChildItem -File -Path $BasePath |
      Where-Object {$_.LastWriteTime -ge (Get-Date).AddMinutes(-5)}

  Write-Output ("`nAll done now at {0}" -f (Get-Date -Format 's'));

}

} #end of ScriptBlock sb002

##===========================================
## New item
## List files older (or newer) than N days. No
## recursion is carried out.
## 10 March 2023
##===========================================

$sb003 = {
<#
List files older (or newer) than N days. Directories are ignored.
TypeName: System.Management.Automation.ScriptBlock

No recursion is carried out.

Last updated : 2023-03-09T18:00:30

#>

Begin {
Set-StrictMode -Version Latest;
$ErrorActionPreference = "Stop";

    Write-Output ("`nScriptBlock started on {0}" -f (Get-Date -Format 's'));

#------------------------------------------------
#region ***** Function ValidateDataFoo *****
function ValidateDataFoo {
[OutputType([System.Management.Automation.PSCustomObject])]
[CmdletBinding()]
Param(
    [parameter(Position=0,
               Mandatory=$true,
               HelpMessage="Cut-off days which determines the cut-off date to use")]
    [ValidateRange('Negative')]
    [int]$cutoffDays,

    [parameter(Position=1,
               Mandatory=$true,
               HelpMessage="Source (input) directory to look for files")]
    [ValidateScript({Test-Path -Path $_ -PathType Container})]
    [System.IO.DirectoryInfo]$sourceDirectory,

    [parameter(Position=2,
               Mandatory=$true,
               HelpMessage="Filter to qualify the (Get-ChildItem) Path parameter")]
    [ValidateNotNullOrEmpty()]
    [string]$fileFilter,

    [parameter(Position=3,
               Mandatory=$true,
               HelpMessage="Whether to look for older or newer files")]
    [ValidateNotNullOrEmpty()]
    [bool]$lookForOlderFiles
) #end param


$fileCount = $sourceDirectory.GetFiles().Count;
if ($fileCount -eq 0) {
  throw "No files found in directory [$sourceDirectory] to look at";
}

$cutoffDate = (Get-Date).AddDays($cutoffDays);

$UserData = [PSCustomObject]@{
  cutoffDate = $cutoffDate
  cutoffDays = [System.Math]::Abs($cutoffDays)
  sourceDirectory = $sourceDirectory
  outputFile = New-TemporaryFile
  fileFilter = $fileFilter
  lookForOlderFiles = $lookForOlderFiles
  fileCount = $fileCount
}
return $UserData;

}
#endregion ***** End of function ValidateDataFoo *****

#------------------------------------------------

$splat = @{
<#
Change accordingly
Modify the contents of this System.Collections.Hashtable
accordingly. This is the only place where modifications
need to be made.

Variable "fileFilter" is used to determine which files to
look at in terms of being older or newer than the cut-off
date calculated. To look at all files, use a filter of '*'
rather than, for example, '*.txt'.

Function "ValidateDataFoo" is used to validate the data
entered. It doesn’t perform any other function or duty.
#>
  cutoffDays = -10
  sourceDirectory = 'C:\gash\testarea_001'
  fileFilter = '*'
  lookForOlderFiles = $false
}
[PSCustomObject]$config = ValidateDataFoo @splat;
Set-Variable -Name 'config' -Option ReadOnly;

    if ($config.lookForOlderFiles) {
        # Look for files older than the cut-off date.
        $wheresb = {$_.LastWriteTime -lt $config.cutoffDate}
        $msg = 'older';
    } else {
        # Look for files newer (more recent) than the cut-off date.
        $wheresb = {$_.LastWriteTime -gt $config.cutoffDate}
        $msg = 'newer';
    }

    $dateMask = 'dd MMMM yyyy';

    # Show (and confirm) which directory we're looking in.
    Write-Output "`nLooking for files $($msg) than $($config.cutoffDays) days";
    Write-Output "Directory looked in is [$($config.sourceDirectory)]";
    Write-Output ("Cut-off date used: {0}" -f $(($config.cutoffDate).ToString($dateMask)) );
    Write-Output ("File filter used: [{0}]" -f $($config.fileFilter));
    Write-Output ('*' * 45);
} #end BEGIN block

Process {

    $splat = @{
        Path   = $config.sourceDirectory;
        Filter = $config.fileFilter;
        File   = $true;
    }
    Get-ChildItem @splat |
        Where-Object $wheresb |
        Out-File -FilePath $config.outputFile;

} #end PROCESS block

End {

    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    Write-Output "See the results of this work in file [$($config.outputFile)]";
    Write-Output "Please check the file filter used if no files have been listed in the output file";
    Write-Output ("{0:N0} files looked at" -f $($config.fileCount));

    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    $BasePath = Split-Path -Path $config.outputFile -Parent;
    # Show files recently created.
    Write-Output "Temporary files created within the last few minutes";
    Get-ChildItem -File -Path $BasePath |
        Where-Object {$_.LastWriteTime -ge (Get-Date).AddMinutes(-5)} |
        Sort-Object -Property LastWriteTime;

    Write-Output ("`nAll done now at {0}" -f (Get-Date -Format 's'));
} #end END block

} #end of ScriptBlock sb003

##===========================================
## New item
## Looking for files.
## 12 March 2023
##===========================================

$sb004 = {
<#
Looking for a file(s).
Looking for a file when I don't where it is located.
Recursion is carried out. This script block can
take a long time to complete depending upon the size
of the directory structure it has to look at.

TypeName: System.Management.Automation.ErrorRecord
TypeName: System.Collections.ArrayList
#>
    Set-StrictMode -Version Latest;
    $ErrorActionPreference = "Stop";
    $Error.Clear();

    Write-Output ("`nScriptblock started on {0}" -f (Get-Date -Format 's'));

    $ConfigData = @{
    <#
    Change accordingly
    Modify the contents of this System.Collections.Hashtable
    accordingly. This is the only place where modifications
    need to be made.
    #>
        searchPattern = 'zip';  #Part filename of interest. Wildcards not required
        startDirectory = 'C:\gash';  #Start directory
    }
    Set-Variable -Name 'ConfigData' -Option ReadOnly;

    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    Write-Output "Looking for filenames containing '$($ConfigData.searchPattern)'"
    Write-Output "Starting with directory [$($ConfigData.startDirectory)]";
    Get-ChildItem -Path $ConfigData.startDirectory -Recurse -File -ErrorAction SilentlyContinue |
        Where-Object -Property 'Name' -Match -Value $ConfigData.searchPattern;

    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    #Number of errors encountered during the running of this ScriptBlock
    $ErrCount = $Error.Count;
    Set-Variable -Name 'ErrCount' -Option ReadOnly;

    ##===========================================
    ## This section is only relevant if we encounter errors
    ## during the running of this scriptblock. If we have no
    ## errors, this block of code is not run.
    ##===========================================
    if ($ErrCount -gt 0) {

        Write-Output $('*' * 32);
        Write-Output ('{0} errors to look at' -f $ErrCount);
        [System.Linq.Enumerable]::Repeat("", 2); #blanklines

        #The HashSet<T> class is a collection that contains no duplicate
        #elements, and whose elements are in no particular order.
        $hset = [System.Collections.Generic.HashSet[String]]::new();

        $fred = $Error;
        [UInt16]$counter = 0;
        $ee = $fred.GetEnumerator();
        #Loop through our copy of $Error to see what what errors
        #we have
        while ($ee.MoveNext()) {
            $counter++;
            Write-Output ('Looking at error #{0}/{1}' -f $counter, $ErrCount);

            $erec = $ee.Current;
            $MyReason = $erec.CategoryInfo.Reason;
            Write-Output ('Reason: {0}' -f $MyReason);
            $hset.Add($MyReason) | Out-Null;

            $MyTarget = $erec.CategoryInfo.TargetName;
            $ObjectType = if (Test-Path -Path $MyTarget -PathType Container) {'directory'} else {'file'}
            Write-Output ('Target name: {0}     ({1})' -f $MyTarget, $ObjectType);

            Write-Output '';
        } #end while loop

        if ($hset.Count -gt 0) {
            #
            Write-Output 'Summary: ErrorCategoryInfo.Reason - text description of the errors found:';
            foreach ($item in $hset) {
                Write-Output $item;
            }
        } #end ($hset.Count -gt 0)

    } #end if ($ErrCount -gt 0)


$message = @"

If no files have been listed, this means no files were
found containing the search pattern [$($ConfigData.searchPattern)]
"@
Write-Output $message;
Write-Output ("`nAll done now at {0}" -f (Get-Date -Format 's'));
} #end of ScriptBlock sb004

##===========================================
## New item
## Calculate the hash of a file using a filestream
## and .NET libraries.
## 13 March 2023
##===========================================

$sb005 = {
<#
Compute the hash of a file using a filestream
and .NET libraries.

The acceptable hash function values are:
SHA1, SHA256, SHA384, SHA512 OR MD5

See also:
o System.Security.Cryptography Namespace.
o Get-FileHash cmdlet
#>
    Set-StrictMode -Version Latest;
    $ErrorActionPreference = "Stop";

    #Acceptable hash function values
    Enum HHashFunction {
      MD5 = 0
      SHA1 = 1
      SHA256 = 2
      SHA384 = 3
      SHA512 = 4
    }

    $ConfigData = @{
    <#
    Change accordingly
    Modify the contents of this System.Collections.Hashtable
    accordingly. This is the only place where modifications
    need to be made.
    #>
      inputFile = 'C:\gash\myfile.txt'
      algoChoice = [HHashFunction]::MD5.ToString()
    }
    Set-Variable -Name 'ConfigData' -Option ReadOnly;
    Write-Output "Trying to use hash algorithm $($ConfigData.algoChoice)";

    switch ($ConfigData.algoChoice) {
      'SHA1'   {$hashAlgo = [System.Security.Cryptography.SHA1]::Create();;
                break;}
      'SHA256' {$hashAlgo = [System.Security.Cryptography.SHA256]::Create();
                break;}
      'SHA384' {$hashAlgo = [System.Security.Cryptography.SHA384]::Create();
                break;}
      'SHA512' {$hashAlgo = [System.Security.Cryptography.SHA512]::Create();
                break;}
      'MD5'    {$hashAlgo = [System.Security.Cryptography.MD5]::Create();
                break;}
    }

    Set-Variable -Name 'hashAlgo' -Option ReadOnly;

    #Creates a read-only filestream.
    $fstream = (Get-Item -Path $ConfigData.inputFile).OpenRead();
    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    Write-Output "Length of the input stream in bytes: $($fstream.Length)";

    #Computes the hash value for the specified Stream object and
    #return the computed hash code as a Byte[] array
    $hashArray = $hashAlgo.ComputeHash($fstream);

    #Converts the numeric value of each element of the specified
    #array of bytes to its equivalent hexadecimal string
    #representation.
    $bitc = [System.BitConverter]::ToString($hashArray).Replace('-','');

    Write-Output "The size, in bits, of the computed hash code: $($hashAlgo.HashSize)";
    Write-Output "$($ConfigData.algoChoice) hash for file [$($ConfigData.inputFile)] is :`n$bitc";

    # -----
    $hashAlgo.Dispose();
    $fstream.Close();
    $fstream.Dispose();

    [System.Linq.Enumerable]::Repeat("", 2); #blanklines
    Write-Output 'All done now';

} #end of ScriptBlock sb005

##===========================================
## New item
## Count the number of lines (including blank)
## lines) in a text file
## 13 March 2023
##===========================================

$sb006 = {
<#
The purpose of this script block is to count the number of lines in
a text file. Unpredictable results will occur if run against a
binary file. As a script block, it's suitable for submitting as a
background job. Admittedly, for small files this won't be necessary,
but for large files, this will come in handy.
#>
  $BeginTime = Get-Date;

  $ConfigData = @{
  <#
  Change accordingly
  Modify the contents of this System.Collections.Hashtable
  accordingly. This is the only place where modifications
  need to be made.
  #>
    Basepath = 'C:\gash'
    Filename = 'myfile.txt'
  }
  Set-Variable -Name 'ConfigData' -Option ReadOnly;

  $path = Join-Path -Path $ConfigData.Basepath -ChildPath $ConfigData.Filename;
  $numlines = Get-Content -Path $path | Measure-Object;
  $EndTime = Get-Date;

  [System.Linq.Enumerable]::Repeat("", 2); #blanklines
  Write-Output "Count lines in a file";
  Write-Output "Filename: $path";
  Write-Output "$($numlines.Count) lines in file";
  $dateMask = 'dddd, dd MMMM yyyy HH:mm:ss';
  Write-Output "Start time: $($BeginTime.ToString($dateMask))";
  Write-Output "End time: $($EndTime.ToString($dateMask))";
  Write-Output 'Elapsed time:';
  New-TimeSpan -Start $BeginTime -End $EndTime |
     Format-Table -AutoSize -Property Hours, Minutes, Seconds, Milliseconds;

  [System.Linq.Enumerable]::Repeat("", 2); #blanklines
  Write-Output ("All done now at {0}" -f (Get-Date -Format 's'));

} #end of ScriptBlock sb006

##=============================================
## End of scriptblocks list
##=============================================
