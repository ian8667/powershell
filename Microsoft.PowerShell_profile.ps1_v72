#------------------------------------------------
# My local Powershell configuration file.
# For use with PowerShell PSVersion 7.2 (Core)
#
# See also
# http://stackoverflow.com/questions/138144/whats-in-your-powershell-profile-ps1file
# http://msdn.microsoft.com/en-us/library/windows/desktop/bb613488(v=vs.85).aspx
# http://technet.microsoft.com/en-us/library/ee156814.aspx
#
# ie, if running a shell with admin privileges.
# (get-host).UI.RawUI.Foregroundcolor="Yellow"
# $a = (Get-Host).UI.RawUI
# $a.WindowTitle = "Admin Session"
# or
# $Host.UI.RawUI.WindowTitle = "PowerShell ROCKS"
#
# Predictive IntelliSense
# Announcing PSReadLine 2.1+ with Predictive IntelliSense
# https://devblogs.microsoft.com/powershell/announcing-psreadline-2-1-with-predictive-intellisense/
# PSReadLine contains functions to navigate and accept predictions.
# As an example, to accept a displayed prediction, use "AcceptSuggestion".
# AcceptSuggestion is built within ForwardChar, which by default
# is bound to the "RightArrow" key.
#
# Predictive IntelliSense is disabled by default.
# Enable:
# Set-PSReadLineOption -PredictionSource History
# Disable:
# Set-PSReadLineOption -PredictionSource None
# Set-PSReadLineOption, Module PSReadLine
# https://docs.microsoft.com/en-us/powershell/module/psreadline/set-psreadlineoption?view=powershell-7.1
#
# PSReadLine
# https://docs.microsoft.com/en-us/powershell/module/psreadline/?view=powershell-7.1
#
# Last updated : 2022-11-08T19:35:39
#------------------------------------------------

#------------------------------------------------
# Go to our preferred startup location.
#------------------------------------------------
Set-Location -Path 'C:\Family\powershell';
#Clear-Host;

#------------------------------------------------
# Welcome message and initial setup.
#------------------------------------------------
Write-Host "You are now entering PowerShell : $($env:Username)";
Get-Date;
Write-Host "We're currently in directory $(Get-Location)";
Write-Host ("`nToday is {0}" -f (Get-Date).DayOfWeek);

#------------------------------------------------
# Create some aliases.
#------------------------------------------------
Set-Alias -Name 'view' -Value 'c:\windows\notepad.exe';
Set-Alias -Name 'grep' -Value 'Select-String';

Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward;
Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward;
#Set-PSReadlineOption -TokenKind String -ForegroundColor Cyan
#Set-PSReadlineOption -ContinuationPromptForegroundColor Magenta

$colors = @{
  "String" = [System.ConsoleColor]::Cyan;
  "ContinuationPrompt" = [System.ConsoleColor]::Magenta;
  "Comment" = [System.ConsoleColor]::Yellow;
}
$HistSavePath = 'C:\Family\powershell\ConsoleHost_history.txt';
Set-PSReadLineOption -Colors $colors -HistorySavePath $HistSavePath;

#Enable Predictive IntelliSense
Set-PSReadLineOption -PredictionSource History;

Remove-Variable -Name 'colors', 'HistSavePath';
#------------------------------------------------
# Setup some variables.
#------------------------------------------------
$MaximumHistoryCount = 1024;
#Write-Host "MaximumHistoryCount now set to $MaximumHistoryCount";

#------------------------------------------------
# Create some functions.
#------------------------------------------------
function prompt
{
    $width = ($Host.UI.RawUI.WindowSize.Width - 2 - $(Get-Location).ToString().Length);
    $hr = New-Object System.String @('-', $width);

    $currtime=$(get-date).Tostring("HH:mm:ss");
    Write-Host -ForegroundColor Red $(Get-Location) $hr;

    Write-Host ("PS " + $($currtime) +"==>") -nonewline;
    return " ";
}

#------------------------------------------------
# Misc items.
#------------------------------------------------
#Set-PSDebug -Strict
Set-StrictMode -Version Latest;
# The JShell tool, also called REPL (Read Evaluate Print Loop),
# allows you to execute Java code, getting immediate results.
$jshell = 'C:\Program Files\Java\jdk-19\bin\jshell.exe';

$Host.UI.RawUI.WindowTitle = "PowerShell 7";

# Once you've written a number of PowerShell scripts, you
# might find it useful to collect them in one place and
# create a PSDrive named scripts: to find them quickly.
# You could add the following to your profile to create
# such a PSDrive.
#New-PSdrive -name scripts -PSprovider filesystem -root C:\Family\Ian
