# MonthCalendar Class
# https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.monthcalendar?view=netframework-4.7.1
#
# How to: Display More than One Month in the Windows Forms MonthCalendar Control
# https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/display-more-than-one-month-wf-monthcalendar-control
#

[CmdletBinding()]
Param () #end param

#----------------------------------------------------------
# Start of functions
#----------------------------------------------------------

#region ***** function GenerateForm *****
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 26/08/2018 23:46
# Generated By: ianm7
########################################################################

#region Import the Assemblies
Add-Type -AssemblyName "System.Windows.Forms";
Add-Type -AssemblyName "System.Drawing";
#endregion

#region Generated Form Objects
$form1 = New-Object 'System.Windows.Forms.Form'
$monthCalendar1 = New-Object 'System.Windows.Forms.MonthCalendar'
# 'System.Windows.Forms.FormWindowState' is actually an enumeration
# object used by the Form class. It represents the different states
# of the form. The default state is Normal (A default sized window).
#
# Another way to assign the enumeration value would be:
# $InitialFormWindowState = [System.Windows.Forms.FormWindowState]::Normal;
#
# Variable 'InitialFormWindowState' is of type:
# TypeName: System.Windows.Forms.FormWindowState
$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
$button1 = New-Object 'System.Windows.Forms.Button'
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$button1_OnClick=
{
#TODO: Place custom script here
  $monthCalendar1.Dispose();
  $form1.Close();
  $form1.Dispose();

  return;
}

#region Generated Form Code

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
  $form1.WindowState = $InitialFormWindowState
}

$myFont = New-Object System.Drawing.Font("Georgia",12,0,3,0);
# form1
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 290
$System_Drawing_Size.Width = 900
$form1.ClientSize = $System_Drawing_Size
$form1.DataBindings.DefaultDataSourceUpdateMode = 0
$form1.Font = $myFont;
$form1.Name = "form1"
$form1.Text = "My Calendar"

# monthCalendar1
$monthCalendar1.DataBindings.DefaultDataSourceUpdateMode = 0
#$monthCalendar1.FirstDayOfWeek = [System.DayOfWeek]::Saturday
$monthCalendar1.FirstDayOfWeek = 6; # Start the week on Sunday
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 20
$System_Drawing_Point.Y = 20
$monthCalendar1.Location = $System_Drawing_Point
$monthCalendar1.Name = "monthCalendar1"
$monthCalendar1.ShowWeekNumbers = $True
$monthCalendar1.ShowToday = $True;
$monthCalendar1.ShowTodayCircle = $True;
$monthCalendar1.TabStop = $false;
$monthCalendar1.ScrollChange = 1;
$monthCalendar1.MinDate = (Get-Date).AddMonths(-3);
$monthCalendar1.MaxDate = (Get-Date).AddMonths(4);
#A DateTime representing today's date. The default value is
#the current system date. I've inclued this as a reminder
#of where the date is set (or can be set) for the calendar
$monthCalendar1.TodayDate = Get-Date;
#$monthCalendar1.BackColor = [System.Drawing.Color]::Honeydew;
$monthCalendar1.BackColor = [System.Drawing.Color]::LemonChiffon;

# The 'System.Drawing.Size' structure is really used to specify
# a height and width through the Size property for various
# graphics classes. In this example though, we're using it to
# set the number of columns and rows of month calendars to display.
#
# ie, display 3 columns by 1 row of months.
$mysize = New-Object -TypeName 'System.Drawing.Size' -Property @{
  Width  = 3 #Columns
  Height = 1 #Rows
}
$monthCalendar1.CalendarDimensions = $mysize

$form1.Controls.Add($monthCalendar1)


# button1
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 600
$System_Drawing_Point.Y = 240
$button1.Location = $System_Drawing_Point
$button1.Name = "button1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 25
$System_Drawing_Size.Width = 75
$button1.Size = $System_Drawing_Size
$button1.TabIndex = 0;
$button1.TabStop = $True;
$button1.Text = "Close"
$button1.UseVisualStyleBackColor = $True
$button1.add_Click($button1_OnClick)

$form1.Controls.Add($button1)

#endregion Generated Form Code

# The form is centered on the current display, and has the
# dimensions specified in the form's size.
$form1.StartPosition = "CenterScreen"

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$form1.ShowDialog() | Out-Null

} #End Function
#endregion ***** end of function GenerateForm *****

#----------------------------------------------------------
# End of functions
#----------------------------------------------------------

##=============================================
## SCRIPT BODY
## Main routine starts here
##=============================================
Set-StrictMode -Version Latest;
$ErrorActionPreference = "Stop";

#Call the Function
GenerateForm;

##=============================================
## END OF SCRIPT: MonthCalendar.ps1
##=============================================
