<#
.SYNOPSIS

Displays a visual representation of monthly calendars

.DESCRIPTION

Displays a visual representation of three monthly calendars in one
row. So this row will have three monthly calendars of, for example,
January, February, March. The class used to display the monthly
calendar is "System.Windows.Forms.MonthCalendar". The current month
will be the one in the middle.

.EXAMPLE

PS> ./MonthCalendar.ps1

No parameter required

.INPUTS

None, no .NET Framework types of objects are used as input.

.OUTPUTS

No .NET Framework types of objects are output from this script.

.NOTES

File Name    : MonthCalendar.ps1
Author       : Ian Molloy
Last updated : 2022-04-01T00:33:53

.LINK

MonthCalendar Class
https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.monthcalendar?view=netframework-4.7.1

How to: Display More than One Month in the Windows Forms MonthCalendar Control
https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/display-more-than-one-month-wf-monthcalendar-control

#>

<#
new work:
See also:
https://www.codeproject.com/articles/10840/another-month-calendar
o MonthCalendar.MaxSelectionCount Property -use this?
o MonthCalendar.MonthlyBoldedDates Property -shall I bother with
bolded date for holidays for example?
#>

[CmdletBinding()]
Param () #end param

#----------------------------------------------------------
# Start of functions
#----------------------------------------------------------

#region ***** function GenerateForm *****
function GenerateForm {
########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 26/08/2018 23:46
# Generated By: ianm7
########################################################################

#region Import the Assemblies
Add-Type -AssemblyName "System.Windows.Forms";
Add-Type -AssemblyName "System.Drawing";
#endregion

#region Generated Form Objects
#$form1 = New-Object 'System.Windows.Forms.Form';
$form1 = [System.Windows.Forms.Form]::new();

$monthCalendar1 = [System.Windows.Forms.MonthCalendar]::new();
# 'System.Windows.Forms.FormWindowState' is actually an enumeration
# object used by the Form class. It represents the different states
# of the form. The default state is Normal (A default sized window).
#
# Another way to assign the enumeration value would be:
# $InitialFormWindowState = [System.Windows.Forms.FormWindowState]::Normal;
#
# Variable 'InitialFormWindowState' is of type:
# TypeName: System.Windows.Forms.FormWindowState
$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState';
#$button1 = New-Object 'System.Windows.Forms.Button';
$button1 = [System.Windows.Forms.Button]::new();
#endregion Generated Form Objects

#----------------------------------------------
#Generated Event Script Blocks
#----------------------------------------------
#Provide Custom Code for events specified in PrimalForms.
$button1_OnClick=
{
#TODO: Place custom script here
    $monthCalendar1.Dispose();
    $form1.Close();
    $form1.Dispose();

    return;
}

#region Generated Form Code

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
  $form1.WindowState = $InitialFormWindowState
}

<#
Stores an ordered pair of integers, which specify a Height
and Width. This structure is typically used to set the size
of form components.
Height Property - gets or sets the vertical component of this
Size structure.
Width Property - gets or sets the horizontal component of this
Size structure.
#>
$DrawSize = [System.Drawing.Size]::new(0,0); #width, height

<#
Represents an ordered pair of integer X- and Y-coordinates
that defines a point in a two-dimensional plane. This
structure is typically used to set the location of form
components.
X - the horizontal position of the point.
Y - the vertical position of the point.
#>
$DrawPoint = [System.Drawing.Point]::new(0,0); #X, Y

$myFont = New-Object System.Drawing.Font("Georgia",12,0,3,0);
Set-Variable -Name 'myFont' -Option ReadOnly;

# form1
$DrawSize.Height = 290;
$DrawSize.Width = 900;
$form1.ClientSize = $DrawSize;
$form1.DataBindings.DefaultDataSourceUpdateMode = 0;
$form1.Font = $myFont;
$form1.Name = "form1";
$form1.Text = "My Calendar";

# monthCalendar1
$monthCalendar1.DataBindings.DefaultDataSourceUpdateMode = 0;
#$monthCalendar1.FirstDayOfWeek = [System.DayOfWeek]::Saturday
$monthCalendar1.FirstDayOfWeek = 6; # Start the week on Sunday
$DrawPoint.X = 20;
$DrawPoint.Y = 20;
$monthCalendar1.Location = $DrawPoint;
$monthCalendar1.Name = "monthCalendar1";
$monthCalendar1.ShowWeekNumbers = $True;
$monthCalendar1.ShowToday = $True;
$monthCalendar1.ShowTodayCircle = $True;
$monthCalendar1.TabStop = $false;
$monthCalendar1.ScrollChange = 1;
#A DateTime representing today's date. The default value is
#the current system date. I've inclued this as a reminder
#of where the date is set (or can be set) for the calendar
$Today = Get-Date;
$monthCalendar1.TodayDate = $Today;
$monthCalendar1.MinDate = $Today.AddMonths(-3);
$monthCalendar1.MaxDate = $Today.AddMonths(4);
$monthCalendar1.BackColor = [System.Drawing.Color]::LemonChiffon;

# The 'System.Drawing.Size' structure is really used to specify
# a height and width through the Size property for various
# graphics classes. In this example though, we're using it to
# set the number of columns and rows of month calendars to display.
#
# ie, display 3 columns by 1 row of month calendars.
#$mysize = New-Object -TypeName 'System.Drawing.Size' -Property @{
#    Width  = 3 #Columns
#    Height = 1 #Rows
#}
$DrawSize.Width  = 3; #Columns
$DrawSize.Height = 1; #Rows
$monthCalendar1.CalendarDimensions = $DrawSize;

$form1.Controls.Add($monthCalendar1);


# button1
$DrawPoint.X = 600;
$DrawPoint.Y = 240;
$button1.Location = $DrawPoint;
$button1.Name = "button1";
$DrawSize.Height = 25;
$DrawSize.Width = 75;
$button1.Size = $DrawSize;
$button1.TabIndex = 0;
$button1.TabStop = $True;
$button1.Text = "Close";
$button1.UseVisualStyleBackColor = $True;
$button1.add_Click($button1_OnClick);

$form1.Controls.Add($button1);

#endregion Generated Form Code

# The form is centered on the current display, and has the
# dimensions specified in the form's size.
$form1.StartPosition = "CenterScreen";

# 
$message = @"
Creating an external window to display the calendars.
Please look behind other windows if you canâ€™t see anything
"@ #end of 'message' variable
Write-Output $message;

#Save the initial state of the form
$InitialFormWindowState = $form1.WindowState;
#Init the OnLoad event to correct the initial state of the form
$form1.add_Load($OnLoadForm_StateCorrection);
#Show the Form
$form1.ShowDialog() | Out-Null;

} #End Function
#endregion ***** end of function GenerateForm *****

#----------------------------------------------------------
# End of functions
#----------------------------------------------------------

##=============================================
## SCRIPT BODY
## Main routine starts here
##=============================================
Set-StrictMode -Version Latest;
$ErrorActionPreference = "Stop";

#Call the Function
GenerateForm;

##=============================================
## END OF SCRIPT: MonthCalendar.ps1
##=============================================
